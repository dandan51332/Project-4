#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

class Receiver:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)

        self.remote_host = None
        self.remote_port = None
        self.next_expected = 0  # Next packet we need to print
        self.buffer = {}  

    def send(self, message):
        self.log("Sent message %s" % json.dumps(message))
        self.socket.sendto(json.dumps(message).encode("utf-8"), (self.remote_host, self.remote_port))

    def recv(self, socket):
        data, addr = socket.recvfrom(65535)

        # Grab the remote host/port if we don't already have it
        if self.remote_host is None:
            self.remote_host = addr[0]
            self.remote_port = addr[1]

        # Make sure we're talking to the same remote host
        if addr != (self.remote_host, self.remote_port):
            self.log("Error:  Received response from unexpected remote; ignoring")
            return None
        else:
            data = json.loads(data.decode("utf-8"))
            seq_num = int(data['seq'])
            if seq_num < self.next_expected:
                self.log("Received duplicate message with seq %s" % data['seq'])
            else:
                self.log("Received message %s" % data)
                self.handle_packet(data['seq'], data)
            return data
    
    def handle_packet(self, seq, data):
        # Store the packet
        self.buffer[seq] = data
        
        # Print all packets we can in order
        while self.next_expected in self.buffer:
            # Print out the data to stdout
            print(self.buffer[self.next_expected]["data"], end='', flush=True)
            del self.buffer[self.next_expected]
            self.next_expected += 1
    
    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def run(self):
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                msg = self.recv(conn)

                if msg:
                    # Always send back an ack
                    self.send({ "type": "ack", "seq": msg["seq"] })


        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()
