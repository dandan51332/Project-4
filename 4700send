#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

DATA_SIZE = 1375
TIMEOUT = 1

class Sender:
    
    def __init__(self, host, port):
        self.host = host
        self.port = int(port)
        self.log("Sender starting up using port %s" % self.port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))

        self.window_size = 2  # Start conservative
        self.consecutive_acks = 0
        self.in_flight = {}
        self.next_seq = 0
        
        self.remote_host = None
        self.remote_port = None

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message):
        self.log("Sending message '%s'" % json.dumps(message))
        self.socket.sendto(json.dumps(message).encode("utf-8"), (self.host, self.port))

    def recv(self, socket):
        data, addr = socket.recvfrom(65535)

        if self.remote_host is None:
            self.remote_host = addr[0]
            self.remote_port = addr[1]

        if addr != (self.remote_host, self.remote_port):
            self.log("Error: Received response from unexpected remote; ignoring")
            return None
        else:
            self.log("Received message %s" % data.decode("utf-8"))
            return json.loads(data.decode("utf-8"))

    def run(self):
        
        while True:
            # Check for timeouts and retransmit
            current_time = time.time()
            for seq, packet_info in list(self.in_flight.items()):
                if current_time - packet_info['time'] > TIMEOUT:
                    self.log(f"Timeout for packet {seq}, retransmitting")
                    self.send(packet_info['msg'])
                    packet_info['time'] = current_time
                    self.window_size = max(2, self.window_size // 2)
                    self.log(f"Decreased window to {self.window_size}")

            # Determine what sockets to monitor
            can_send = len(self.in_flight) < self.window_size
            sockets = [self.socket, sys.stdin] if can_send else [self.socket]

            socks = select.select(sockets, [], [], 0.1)[0]
            
            for conn in socks:
                if conn == self.socket:
                    # Received ACK
                    data = self.recv(conn)
                    if data and data.get('type') == 'ack':
                        ack_seq = data['seq']
                        if ack_seq in self.in_flight:
                            self.log(f"Got ACK for packet {ack_seq}")
                            del self.in_flight[ack_seq]
                            
                            # Increase window on successful ACKs
                            self.consecutive_acks += 1
                            if self.consecutive_acks >= 5 and self.window_size < 20:
                                self.window_size += 1
                                self.consecutive_acks = 0
                                self.log(f"Increased window to {self.window_size}")
                        
                elif conn == sys.stdin:
                    # Read and send new data
                    data = sys.stdin.read(DATA_SIZE)
                    if len(data) == 0:
                        # Wait for all ACKs before exiting
                        if len(self.in_flight) == 0:
                            self.log("All done!")
                            sys.exit(0)
                    else:
                        msg = {"type": "msg", "data": data, "seq": self.next_seq}
                        self.send(msg)
                        self.in_flight[self.next_seq] = {'msg': msg, 'time': time.time()}
                        self.next_seq += 1

        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()